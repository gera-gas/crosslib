#ifndef TYPEDEF_H_
#define TYPEDEF_H_
/**
 *  @file     typedef.h
 *  @brief    Header file with type definitions.
 *  @author   Gerasimov A.S.
 *  @date     2013-06-22 16:29:26 +0400
 *  @note     Change this type defines in CMake, special for you target.
 */
#include "config.h"
#ifndef NOSTDINC_STDINT_H
#include <stdint.h>
#endif

#define nil 0

#ifndef __ASM__

#ifndef NULL
#define NULL ((void *)nil)
#endif

#cmakedefine int8   @int8@
#cmakedefine uint8  @uint8@
#cmakedefine int16  @int16@
#cmakedefine uint16 @uint16@
#cmakedefine int32  @int32@
#cmakedefine uint32 @uint32@
#cmakedefine int64  @int64@
#cmakedefine uint64 @uint64@

typedef unsigned char   uchar;
#ifndef _LINUX_TYPES_H
typedef unsigned char   unchar;
typedef unsigned short  ushort;
typedef unsigned int    uint;
typedef unsigned long   ulong;
#endif
typedef  unsigned int   bool_t;

typedef  void ( *fptr_t )( void );
typedef  bool_t ( *fbool_t )( void );
/*
 *  Union macroname for combinied empty struct
 *  declaration with simple variable.
 *
 *  Example:  struct <name> {
 *                u_start {
 *                    unsigned <name> : 1;
 *                    unsigned <name> : 30;
 *                } u_end( uint32 v32 );
 *            };
 */
#define u_start\
	union {\
	struct

#define u_end( n )\
	; n;\
	}

#define KBYTE  * 1024
#define MBYTE  * 1024 * 1024
#define GBYTE  * 1024 * 1024 * 1024

#else  /*  __ASM__  */

#define  uint8   .byte
#define  uint16  .2byte
#define  uint32  .4byte
#define  uint64  .8byte

#endif  /*  __ASM__     */
#endif  /*  TYPEDEF_H_  */
