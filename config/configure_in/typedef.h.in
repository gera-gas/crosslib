#ifndef TYPEDEF_H_
#define TYPEDEF_H_
/**
 *  @file     typedef.h
 *  @brief    Header file with type definitions.
 *  @author   Gerasimov A.S.
 *  @date     2013-06-22 16:29:26 +0400
 *  @note     Change this type defines in CMake, special for you target.
 */
#define IN
#define OUT
#define nil  0

#ifndef __ASM__

#define IO volatile

#ifndef NULL
#define NULL ((void *)nil)
#endif

#cmakedefine CTYPE_1BYTE @CTYPE_1BYTE@
#cmakedefine CTYPE_2BYTE @CTYPE_2BYTE@
#cmakedefine CTYPE_4BYTE @CTYPE_4BYTE@
#cmakedefine CTYPE_8BYTE @CTYPE_8BYTE@

typedef  signed CTYPE_1BYTE    int8;
typedef  unsigned CTYPE_1BYTE  uint8;
typedef  signed CTYPE_2BYTE    int16;
typedef  unsigned CTYPE_2BYTE  uint16;
typedef  signed CTYPE_4BYTE    int32;
typedef  unsigned CTYPE_4BYTE  uint32;
typedef  signed CTYPE_8BYTE    int64;
typedef  unsigned CTYPE_8BYTE  uint64;

typedef unsigned char   uchar;
#ifndef _LINUX_TYPES_H
typedef unsigned short  ushort;
typedef unsigned int    uint;
typedef unsigned long   ulong;
#endif
typedef  unsigned int   bool_t;

typedef  void ( *fptr_t )( void );
typedef  bool_t ( *fbool_t )( void );
/*
 *  Union macroname for combinied empty struct
 *  declaration with simple variable.
 *
 *  Example:  struct <name> {
 *                u_start {
 *                    unsigned <name> : 1;
 *                    unsigned <name> : 30;
 *                } u_end( uint32 v32 );
 *            };
 */
#define u_start\
	union {\
	struct

#define u_end( n )\
	; n;\
	}

#define KBYTE  * 1024
#define MBYTE  * 1024 * 1024
#define GBYTE  * 1024 * 1024 * 1024

#else  /*  __ASM__  */

#define  uint8   .byte
#define  uint16  .2byte
#define  uint32  .4byte
#define  uint64  .8byte

#endif  /*  __ASM__     */
#endif  /*  TYPEDEF_H_  */
