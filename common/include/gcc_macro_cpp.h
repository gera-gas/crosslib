#ifndef _CC_CPP_H
#define _CC_CPP_H
/**
 *  @file     cc_cpp.h
 *  @brief    GCC C\C++ macros.
 *  @author   Gerasimov A.S.
 *  @date     2013-06-24
 */
#ifndef __ASM__

/*  ____________________________________________________________________________
 *
 *  Макроопределения переопределяющие установку
 *  атрибутов компилятора (__attribute__).
 *  ____________________________________________________________________________
 */

/**
 *  Макрос, устанавливающий атрибут GCC
 *  для выравнивания адресной границы до кратности 'x', 
 */
#define ALIGNED( x )     __attribute__((aligned(x)))

/**
 *  Упаковывает данные, т.е. команда компилятору, укладывать данные
 *  байт к байту, без выравнивания.
 */
#define PACKED           __attribute__((packed))

/**
 *  Размещает данные в указанную секцию с именем 'name'.
 */
#define SECTION( name )  __attribute__((section(name)))

/**
 *  Устанавливает аттрибут функции "всегда inline".
 */
#define INLINE  __inline__ __attribute__((always_inline))

/**
 *  Функция не будет расширяться до подстановки inline.
 */
#define NOINLINE      __attribute__((noinline))

/**
 *  Предупреждение что функция, тип или переменная
 *  с данным атрибутом счтаются устарелыми.
 */
#define DEPRECATED    __attribute__((deprecated))

/**
 *  Используют данную функцию, независимо от того, найдены ли
 *  GCC экземпляры вызова данной функции.
 */
#define USED          __attribute__((__used__))

/**
 *  Сообщает компилятору, что эта функция не имеет состояния (т.е. использует 
 *  для генерации возвращаемого результата только переданные ей аргументы).
 */
#define CONST         __attribute__((__const__))

/**
 *  Принуждает компилятор всегда проверять, что возвращаемое 
 *  значение функции проверяется в месте вызова.
 *  этим гарантируется, что везде, откуда вызывается функция результат будет проверяться.
 */
#define CHECKED       __attribute__((warn_unused_result))

/**
 *  Задает список синонимов имен для используемой функции.
 */
#define ALIAS( ... )  __attribute__ ((alias (__VA_ARGS__)))

/**
 *  Указывает компилятору, что данная функция является обработчиком
 *  прерывания, соответственно, компилятор использует специальные
 *  команды возврата из функции и сохраняет контекст согласно ABI.
 */
#define IRQ_HANDLER  __attribute__ ((interrupt_handler))
#define IRQ_FAST     __attribute__ ((fast_interrupt))


/*
 *  ____________________________________________________________________________
 *
 *  Пояснения компилятору о наиболее предсказуемом
 *  ветвлении для генерации наиблее оптимального кода.
 *  ____________________________________________________________________________
 *
 *  Если условие помечено "likely", то компилятор может поместить порцию кода
 *  True непосредственно после ветвления. Код для варианта False в этом случае
 *  будет доступен через инструкцию ветвления, что не так оптимально, но и менее
 *  вероятно. При таком способе код оптимизируется для наиболее вероятного варианта.
 */

/**
 *  Организация линейного кода для
 *  наибoлее вероятной ветки
 */
#define LIKELY( x )    __builtin_expect(!!(x), 1)

/**
 *  Организация линейного кода для
 *  наименее вероятной ветки
 */
#define UNLIKELY( x )  __builtin_expect(!!(x), 0)


/*  ____________________________________________________________________________
 *
 *  Макроопределения переопределяющие ассемблерные
 *  директивы компилятора gcc.
 *  ____________________________________________________________________________
 */

/**
 *  Макрос вставляет команду компилятора для встраиваемого ассемблера.
 */
#define ASM  __asm__ __volatile__


/**
 *  Выравнивает область кода с указанным смещением ('offset') от
 *  текущей адресной позиции на указанное кол-во разрядов.
 */
#define p2align( offset )  ASM(".p2align "#offset"\n")


/**
 *  Повторяет указанную в параметрах строку "n" раз
 *  средствами GNU assembler.
 */
#define LINE_REPEAT( n, ... ) do {\
	ASM(".rep %0" :: "I"(n) );\
	__VA_ARGS__;\
	ASM(".endr");\
} while (0)

#endif  /*  __ASM__  */
#endif  /*  _CC_CPP_H  */
